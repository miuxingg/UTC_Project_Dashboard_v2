import Head from 'next/head';
import { Col, Row } from 'reactstrap';
import SalesChart from '../src/components/dashboard/SalesChart';
import Feeds from '../src/components/dashboard/Feeds';
import ProjectTables from '../src/components/dashboard/ProjectTable';
import TopCards from '../src/components/dashboard/TopCards';
import Blog from '../src/components/dashboard/Blog';
import { getServerSideWithProtectedRoute } from '../src/libs/hocs/getServerSideWithProtectedRoute';
import { apiSdk } from '../src/libs/apis';
import {
  getDataset,
  getStatistic,
  getStatisticByQuery,
} from '../src/redux/statistics';
import { NextPage } from 'next';
import { useDispatch, useSelector } from 'react-redux';
import {
  datasetSelector,
  statisticSelector,
} from '../src/redux/statistics/selectors';
import { moneyFormat } from '../src/libs/utils';
import { getConfig } from '../src/redux/config';
import { configSelector } from '../src/redux/config/selectors';
import dayjs from 'dayjs';
import { useEffect, useMemo, useState } from 'react';

import { bookBestSalerSelector } from '../src/redux/product/selectors';
import { getBookBestSaler } from '../src/redux/product';

export const Home: NextPage = () => {
  const dispatch = useDispatch();
  const statistics = useSelector(statisticSelector);
  const dataset = useSelector(datasetSelector);
  const config = useSelector(configSelector);
  const bookBestSalers = useSelector(bookBestSalerSelector);
  const [year, setYear] = useState(new Date().getFullYear());

  useEffect(() => {
    dispatch(getStatisticByQuery({ year }));
  }, [dispatch, year]);

  const datasetMapping = useMemo(() => {
    const { money, quantity } = dataset;
    const moneyData = [];
    const quantityData = [];
    for (let i = 1; i <= 12; i++) {
      moneyData.push(money?.[String(i)] / 10 ** 6 || 0);
      quantityData.push(quantity?.[String(i)] || 0);
    }
    return { money: moneyData, quantity: quantityData };
  }, [dataset]);
  const handleYearChange = (year: number) => {
    setYear(year);
  };
  return (
    <div>
      <Head>
        <title>BookStore Dashboard</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div>
        <Row>
          <Col sm='6' lg='3'>
            <TopCards
              bg='bg-light-success text-success'
              title='Profit'
              subtitle='Số sản phẩm đã bán'
              earning={moneyFormat(statistics.numberOfBooksSold, '')}
              icon='bi bi-wallet'
            />
          </Col>
          <Col sm='6' lg='3'>
            <TopCards
              bg='bg-light-danger text-danger'
              title='Refunds'
              subtitle='Số tiền đã bán được'
              earning={moneyFormat(statistics.totalMoney)}
              icon='bi bi-coin'
            />
          </Col>
          <Col sm='6' lg='3'>
            <TopCards
              bg='bg-light-warning text-warning'
              title='New Project'
              subtitle='Số sản phẩm đang bày bán'
              earning={moneyFormat(statistics.booksAvailable, '')}
              icon='bi bi-basket3'
            />
          </Col>
          <Col sm='6' lg='3'>
            <TopCards
              bg='bg-light-info text-into'
              title='Sales'
              subtitle='Số sản phẩm tồn kho'
              earning={moneyFormat(statistics.booksInventory, '')}
              icon='bi bi-bag'
            />
          </Col>
        </Row>
        <Row>
          <Col sm='12' lg='12' xl='12' xxl='12'>
            <SalesChart
              money={datasetMapping.money}
              quantity={datasetMapping.quantity}
              onYearChange={handleYearChange}
            />
          </Col>
        </Row>
        <Row>
          <Col lg='12' sm='12'>
            <ProjectTables datas={bookBestSalers.items.slice(0, 10)} />
          </Col>
        </Row>
        <Row>
          {config?.blog.map((blg) => (
            <Col sm='6' lg='6' xl='3' key={blg.title}>
              <Blog
                image={blg.image}
                title={blg.title}
                subtitle={dayjs(blg.createdAt).format('DD/MM/YYYY')}
                text={blg.content}
              />
            </Col>
          ))}
        </Row>
      </div>
    </div>
  );
};
export default Home;

export const getServerSideProps = getServerSideWithProtectedRoute(
  async (ctx, store) => {
    const [statistic, config, dataset, bestSaler] = await Promise.all([
      apiSdk.statisticsApis.getStatistics(),
      apiSdk.configApis.getConfig(),
      apiSdk.statisticsApis.getDataset(),
      apiSdk.bookApis.getBestSalerBooks(),
    ]);
    store.dispatch(getBookBestSaler(bestSaler));
    store.dispatch(getStatistic(statistic));
    store.dispatch(getConfig(config));
    store.dispatch(getDataset(dataset));
    return {
      props: {},
    };
  }
);
